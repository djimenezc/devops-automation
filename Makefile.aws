#backend-vpc
AWS_SG ?= sg-002271feae348b68c
#
AWS_SUBNET_ID ?= subnet-067387b658830caa3
AMI_ID ?= ami-0c1bc246476a5572b
INSTANCE_TYPE ?= t3.medium
ROLE_NAME ?= security-scanner-ec2
KEY_PAIR ?= david-key
INSTANCE_NAME ?= david_security_scanner
TMUX_SESSION_NAME ?= $(INSTANCE_NAME)
TERRAFORM_BUCKET_NAME ?= david-terraform-remote-state-${AWS_DEFAULT_REGION}
TERRAFORM_LOCK_TABLE_NAME ?= terraform-locks

INSTANCE_ID ?= $(shell aws ec2 describe-instances --filters 'Name=tag:Name,Values=$(INSTANCE_NAME)' 'Name=instance-state-name,Values=running,stopped' --query 'Reservations[*].Instances[*].[InstanceId]' --output text)

aws-vault:
	aws-vault exec default

aws-ec2-describe-instances:
	aws ec2 describe-instances --query 'Reservations[*].Instances[*].{Instance:InstanceId,AZ:Placement.AvailabilityZone,Name:Tags[?Key==`Name`]|[0].Value,Subnet:SubnetId,InstanceType:InstanceType,State: State.Name, Ip: PrivateIpAddress }'\
 	--filters 'Name=instance-state-name,Values=running,stopped,stopping'  --output table

aws-ec2-launch:
	aws ec2 run-instances --image-id $(AMI_ID) --count 1 --instance-type $(INSTANCE_TYPE) --key-name $(KEY_PAIR) \
 	--security-group-ids $(AWS_SG) --subnet-id $(AWS_SUBNET_ID) --iam-instance-profile Name="$(ROLE_NAME)" \
	--tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=$(INSTANCE_NAME)}]' \
	--block-device-mapping "[ { \"DeviceName\": \"/dev/xvda\", \"Ebs\": { \"VolumeSize\": 60 } } ]"

aws-ec2-get-ids:
	@echo $(INSTANCE_ID)

aws-ec2-tag:
	aws ec2 create-tags --resources $(INSTANCE_ID) --tags Key=Testing,Value=true Key=Owner,Value=david;

aws-ec2-terminate:
	aws ec2 terminate-instances --instance-ids $(INSTANCE_ID)

aws-ec2-stop:
	aws ec2 stop-instances --instance-ids $(INSTANCE_ID)

aws-ec2-hibernate:
	aws ec2 stop-instances --instance-ids $(INSTANCE_ID) --hibernate

aws-ec2-start:
	aws ec2 start-instances --instance-ids $(INSTANCE_ID)

aws-ssm-connect:
	aws ssm start-session --target $(INSTANCE_ID)

aws-ssh-connect:
	ssh ec2-user@$(INSTANCE_ID) -i ~/.ssh/$(KEY_PAIR).pem

aws-ssh-connect-tmux:
	ssh ec2-user@$(INSTANCE_ID) -i ~/.ssh/$(KEY_PAIR).pem -t "tmux new-session -s $(TMUX_SESSION_NAME) || tmux attach-session -t $(TMUX_SESSION_NAME)"

#Terraform
aws-terraform-create-s3-backend:
	@if aws s3 ls "s3://$(TERRAFORM_BUCKET_NAME)" 2>&1 | grep -q 'NoSuchBucket'; then \
  		echo "Creating bucket $(TERRAFORM_BUCKET_NAME)"; \
		aws s3api create-bucket --bucket $(TERRAFORM_BUCKET_NAME) --region ${AWS_DEFAULT_REGION} \
			--create-bucket-configuration LocationConstraint=${AWS_DEFAULT_REGION}; \
		aws s3api put-bucket-encryption --bucket $(TERRAFORM_BUCKET_NAME) \
			--server-side-encryption-configuration \
			'{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'; \
		aws s3api put-public-access-block \
            --bucket $(TERRAFORM_BUCKET_NAME) \
            --public-access-block-configuration \
            'BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true'; \
		aws s3api get-public-access-block --bucket $(TERRAFORM_BUCKET_NAME); \
	fi
	-aws dynamodb create-table --table-name $(TERRAFORM_LOCK_TABLE_NAME) \
	--attribute-definitions AttributeName=LockID,AttributeType=S --key-schema AttributeName=LockID,KeyType=HASH \
	 --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5

aws-terraform-create-s3-backend-rollback:
	aws s3api delete-bucket --bucket $(TERRAFORM_BUCKET_NAME)
	aws dynamodb delete-table --table-name $(TERRAFORM_LOCK_TABLE_NAME)

#IAM
aws-iam-role-create:
	aws iam create-role --role-name $(ROLE_NAME) --assume-role-policy-document file://aws/assume-role-policy.json
	${MAKE} aws-iam-role-attach-policy-ssm
	${MAKE} aws-iam-role-show-attached-policy
	aws iam create-instance-profile --instance-profile-name $(ROLE_NAME)
	aws iam add-role-to-instance-profile --instance-profile-name $(ROLE_NAME) --role-name $(ROLE_NAME)

#aws-iam-role-create-ec2-start-stop:
#	aws iam create-role --role-name ec2-start-stop --assume-role-policy-document file://aws/ec2-start-stop-policy.json

aws-iam-associate-instance-profile:
	aws ec2 associate-iam-instance-profile --iam-instance-profile Name=$(ROLE_NAME) --instance-id $(INSTANCE_ID)

aws-iam-role-remove:
	-aws iam delete-instance-profile --instance-profile-name $(ROLE_NAME)
	-aws iam detach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore --role-name $(ROLE_NAME)
	aws iam delete-role --role-name $(ROLE_NAME)

aws-iam-role-attach-policy-ssm:
	aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore --role-name $(ROLE_NAME)

aws-iam-role-show-attached-policy:
	aws iam list-attached-role-policies --role-name $(ROLE_NAME)

aws-iam-ec2-attach-role:
	aws ec2 associate-iam-instance-profile --instance-id $(INSTANCE_ID) --iam-instance-profile Name=